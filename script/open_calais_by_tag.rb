require "application_helper"
require 'find'
require 'calais'
require 'json' 
require 'ruby-debug'

class OpenCalaisByTag
  def self.article(xml_site_id,article)
      Ambient.init
      @xml_site_id = xml_site_id
      Ambient.current_site = @xml_site_id
    logger =  Logger.new("#{RAILS_ROOT}/log/#{@xml_site_id.short_name}_(Section-Uncategorized)_opencalaisi_#{Time.sr_now.to_date}.log")
     [@xml_site_id.articles.find("#{article.id}")].each do | each_article |
    #@xml_site_id.articles.find(:all,:page=>{:size=>1000,:auto=>true}).each do | each_article |
      logger.info("***************************************************************************************************")
      logger.info("Article id #{each_article.id}")
      if ![19224,19225,19226,19227,19228,19229,19230,19231,19232,19233,19234,19235,19236,19237,19238,19239,19240,19241,19242,19243].include?(each_article.id)
        @tags = tag_create(each_article.content)
        if !@tags.blank?
          puts "Total tag count :#{@tags.count}"
          array_tag = []
          t = 0
          @tags.uniq.take(10).each do | each_tag |
            t = t + 1
            puts "OPen Calais Tag ******************:#{each_tag}"
            puts "#{t}"
            
            if each_tag
              #debugger
              @tag = Tag.find_by_alias_name(each_tag)
              
              if !@tag
                @tag = Tag.new
                @tag.name = each_tag.capitalize
                @tag.entity_type = "Article"
                @tag.type = "ManualTag"
                @tag.suggested_by = "OC"
                if @tag.save
                  puts "New Tag :id #{@tag.id}, :name=> #{@tag.name}, :alias_name=> #{@tag.alias_name}"
                  log_tag = Logger.new("#{RAILS_ROOT}/log/#{@xml_site_id.short_name}_opencalaisi_tag_#{Time.sr_now.to_date}.log")
                  log_tag.info("New Tag :id #{@tag.id}, :name=> #{@tag.name}, :alias_name=> #{@tag.alias_name}")
                else
                  puts "n=Not Tag created"
                end
              end
              site_tag = @xml_site_id.tags.find_by_alias_name(each_tag)
              @tag.site_ids += [@xml_site_id.id] if !site_tag
              array_tag << @tag.id
            end
          end
          array_tag.uniq.each_with_index do | tag_id, i |
            articles_tags =  ArticlesTag.find(:all, :conditions => ["article_id =? and tag_id =?", "#{each_article.id}", "#{tag_id}"])
            if articles_tags.blank?
              each_article.articles_tags << ArticlesTag.new( :tag_id => tag_id, :sequence_number => i, :suggested_by => "OC" )
          logger.info("Created the new ArticleContentsTag :article_content_id => #{each_article.article_contents.last.id} , tag_id => #{tag_id}, :sequence_number => #{i}")   if ArticleContentsTag.create(:article_content_id => "#{each_article.article_contents.last.id}" , :tag_id => tag_id, :sequence_number => i)    
          logger.info("Created the new ArticlesTag :article_id => #{each_article.id} :tag_id => #{tag_id}, :sequence_number => #{i}, :suggested_by => OC")
            else
              logger.info("Tag: #{tag_id} Aleardy there in Article: #{each_article.id}")
              puts "Tag: #{tag_id} Aleardy there in Article: #{each_article.id}"
            end
          end
        else
          logger.info("Tag does not generated by opencalais ,Article id #{each_article.id}")
          puts "<*** Tag does not generated by opencalais ***>"
        end
      else
        puts "Alreadt done #{each_article.id}"
      end
    end
  end
  
  def self.tag_create(article_content)
    begin
      resp= Calais.enlighten( :content => article_content.sub(/(?:http|https|Http|Https):\/\/[a-z0-9]+(?:[\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(?:(?::[0-9]{1,5})?\/[^\s]*)?/,"").sub(/@/,"").gsub(".com",""),:license_id => "n6bpk2ra4pg5qpygt686fxup",:output_format =>:json)
      json=ActiveSupport::JSON.decode(resp)
      @tags=[]
      json.values.each do |value|
        if value["name"] != nil
          @tags << value["name"]
        end
      end
      return @tags rescue ""
    rescue
    end
  end
  
end

